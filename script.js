// Cactus Game - Version Offline compl√®te
let playerCards = [], botCards = [], discardPile = [], drawnCard = null;
let startVisibleCount = 2, cardCount = 4, targetScore = 3;
let currentPlayer = "Toi", playerWins = 0, botWins = 0;
const CARD_POOL = ["R", "A", 2, 3, 4, 5, 6, 7, 8, 9, 10, "V", "D"];
// Indices de cartes temporairement r√©v√©l√©es pour le joueur (m√©moire)
let revealedIndexes = [];
// (Optionnel) indices de cartes du bot r√©v√©l√©es au joueur via pouvoirs
let revealedBotIndexes = [];

const log = (msg) => {
    const logDiv = document.getElementById("log");
    logDiv.innerHTML += `<p>${msg}</p>`;
    logDiv.scrollTop = logDiv.scrollHeight;
    console.log(msg);
};

function login() {
    const username = document.getElementById("username").value.trim();
    if (!username) {
        alert("Entre un pseudo pour continuer.");
        return;
    }
    // Enregistrer nom joueur (utilis√© pour affichage)
    document.getElementById("player-name").innerText = username;
    // Passer √† l'√©cran config
    document.getElementById("welcome").style.display = "none";
    document.getElementById("config").style.display = "block";
    log(`üëã Bienvenue, ${username} !`);
}

function safeCreateRoom() {
    log("üß™ Cr√©ation fictive d'une partie...");
    document.getElementById("config").style.display = "none";
    document.getElementById("lobby").style.display = "block";
    document.getElementById("lobby-room").innerText = "TEST123";
    document.getElementById("lobby-players").innerHTML = "<li>Toi (h√¥te)</li><li>Bot</li>";
    // Afficher le bouton de configuration de la partie
    document.getElementById("start-game").style.display = "inline-block";
}

function joinRoom() {
    log("üß™ Rejoint fictivement une partie...");
    document.getElementById("config").style.display = "none";
    document.getElementById("lobby").style.display = "block";
    document.getElementById("lobby-room").innerText = "TEST123";
    document.getElementById("lobby-players").innerHTML = "<li>Toi</li><li>Bot (h√¥te)</li>";
    // Dans cette version offline, rejoindre se comporte comme cr√©er
    document.getElementById("start-game").style.display = "inline-block";
}

function launchSetup() {
    document.getElementById("lobby").style.display = "none";
    document.getElementById("setup").style.display = "block";
}

function saveGameConfig() {
    // Sauvegarder les param√®tres de la partie choisis
    cardCount = parseInt(document.getElementById("card-count").value);
    startVisibleCount = parseInt(document.getElementById("visible-count").value);
    targetScore = parseInt(document.getElementById("target-score").value);
    log("üíæ Configuration sauvegard√©e.");
}

function startNewGame() {
    // Initialiser une nouvelle partie (distribution des cartes)
    document.getElementById("setup").style.display = "none";
    document.getElementById("game").style.display = "block";
    // R√©initialiser l'√©tat de jeu
    currentPlayer = "Toi";
    drawnCard = null;
    discardPile = [];
    playerCards = Array.from({ length: cardCount }, () => CARD_POOL[Math.floor(Math.random() * CARD_POOL.length)]);
    botCards = Array.from({ length: cardCount }, () => CARD_POOL[Math.floor(Math.random() * CARD_POOL.length)]);
    revealedIndexes = [];
    revealedBotIndexes = [];
    // R√©v√©ler temporairement quelques cartes au d√©but (m√©canique m√©moire)
    for (let i = 0; i < startVisibleCount && i < playerCards.length; i++) {
        revealedIndexes.push(i);
    }
    renderCards();
    // Cacher √† nouveau apr√®s 5 secondes
    setTimeout(() => {
        revealedIndexes = [];
        renderCards();
        log("üïë M√©morisez vos cartes visibles... Elles sont maintenant cach√©es !");
    }, 5000);
    updateTurnInfo();
}

function renderCards() {
    // Mettre √† jour l'affichage des cartes de chaque joueur et de la zone centrale
    // Mettre √† jour la d√©fausse visible
    const discardSpan = document.getElementById("discard");
    if (discardSpan) {
        discardSpan.innerText = (discardPile.length > 0 ? discardPile[discardPile.length - 1] : "Vide");
    }
    // Mettre √† jour la pioche (fixe) - la pioche reste toujours face cach√©e ("?")
    // Actualiser la main du joueur
    const playerHandDiv = document.getElementById("player-hand");
    playerHandDiv.innerHTML = "<h3>Moi</h3>";
    playerCards.forEach((card, i) => {
        const wrap = document.createElement("div");
        wrap.className = "card-wrapper";
        // Carte du joueur (valeur si r√©v√©l√©e, sinon "?")
        const c = document.createElement("div");
        c.className = "card";
        c.innerText = revealedIndexes.includes(i) ? card : "?";
        c.dataset.index = i;
        if (drawnCard !== null) {
            // Permettre clic pour √©changer si une carte a √©t√© pioch√©e
            c.onclick = () => attemptCardSwap(i);
        }
        // Bouton pour d√©fausser la carte de la main (avec p√©nalit√© d'une nouvelle carte)
        const trashBtn = document.createElement("button");
        trashBtn.innerText = "üóë";
        trashBtn.className = "discard-btn";
        trashBtn.onclick = () => discardCardFromHand(i);
        wrap.appendChild(trashBtn);
        wrap.appendChild(c);
        playerHandDiv.appendChild(wrap);
    });
    // Actualiser la main de l'adversaire (Bot)
    const opponentHandDiv = document.getElementById("opponent-hand");
    opponentHandDiv.innerHTML = "<h3>Adversaire</h3>";
    botCards.forEach((card, i) => {
        const wrap = document.createElement("div");
        wrap.className = "card-wrapper";
        const c = document.createElement("div");
        c.className = "card";
        // N'afficher la valeur que si le joueur y a acc√®s (pouvoir), sinon "?"
        c.innerText = revealedBotIndexes.includes(i) ? card : "?";
        // Permettre au joueur de tenter une correspondance de carte (r√®gle du "matching")
        c.onclick = () => attemptBotCardPlay(i, card);
        // (Pas de besoin de bouton poubelle c√¥t√© bot, le clic sur la carte sert pour la tentative)
        wrap.appendChild(c);
        opponentHandDiv.appendChild(wrap);
    });
}

function drawCard() {
    if (currentPlayer !== "Toi") {
        return log("‚õî Ce n'est pas ton tour !");
    }
    if (drawnCard !== null) {
        return log("‚ö†Ô∏è Vous avez d√©j√† une carte pioch√©e en cours.");
    }
    // Piocher une carte al√©atoire
    drawnCard = CARD_POOL[Math.floor(Math.random() * CARD_POOL.length)];
    log(`üÉè Carte pioch√©e : ${drawnCard}`);
    // Si carte sp√©ciale, proposer son utilisation
    if (drawnCard === 8 || drawnCard === 9 || drawnCard === 10 || drawnCard === "V" || drawnCard === "D") {
        let usePower = confirm(`Vous avez pioch√© ${drawnCard} ! Voulez-vous utiliser son pouvoir sp√©cial ?`);
        if (usePower) {
            useSpecialPower(drawnCard);
            return endPlayerTurn();
        }
        // Si le joueur ne l'utilise pas, il pourra l'√©changer ou la d√©fausser normalement
    }
    showDrawnCard();
}

function showDrawnCard() {
    // Afficher la carte pioch√©e et proposer action (√©change ou d√©fausse)
    const drawnDiv = document.getElementById("drawn-card");
    drawnDiv.style.display = "block";
    document.getElementById("new-card").innerText = drawnCard;
    // Ajouter un bouton pour d√©fausser la carte pioch√©e (si pas d√©j√† pr√©sent)
    if (!document.getElementById("discard-drawn")) {
        const btn = document.createElement("button");
        btn.id = "discard-drawn";
        btn.innerText = "D√©fausser la carte";
        btn.onclick = discardDrawnCard;
        drawnDiv.after(btn);
    }
}

function discardDrawnCard() {
    if (drawnCard === null) return;
    // D√©fausser la carte pioch√©e sans l'utiliser ni l'√©changer
    discardPile.push(drawnCard);
    log(`üóë Carte d√©fauss√©e : ${drawnCard}`);
    drawnCard = null;
    // Masquer l'affichage de la carte pioch√©e et retirer le bouton de d√©fausse
    document.getElementById("drawn-card").style.display = "none";
    document.getElementById("discard-drawn")?.remove();
    renderCards();
    endPlayerTurn();
}

function attemptCardSwap(index) {
    if (drawnCard === null) return;
    // √âchanger la carte pioch√©e avec la carte de la position index du joueur
    const oldCard = playerCards[index];
    playerCards[index] = drawnCard;
    drawnCard = null;
    discardPile.push(oldCard);
    log(`üîÑ √âchange effectu√© : votre carte ${oldCard} est d√©fauss√©e, vous gardez ${playerCards[index]}.`);
    // Masquer l'affichage de la carte pioch√©e
    document.getElementById("drawn-card").style.display = "none";
    document.getElementById("discard-drawn")?.remove();
    renderCards();
    endPlayerTurn();
}

function discardCardFromHand(index) {
    if (currentPlayer !== "Toi") {
        return log("‚õî Ce n'est pas votre tour.");
    }
    // D√©fausser directement une carte de sa main (en la rempla√ßant par une nouvelle tir√©e au hasard)
    const removed = playerCards[index];
    discardPile.push(removed);
    playerCards[index] = CARD_POOL[Math.floor(Math.random() * CARD_POOL.length)];
    log(`üóë Vous vous √™tes d√©fauss√© de ${removed} (une nouvelle carte inconnue la remplace).`);
    renderCards();
    endPlayerTurn();
}

function initiateDiscardSwap() {
    if (currentPlayer !== "Toi") {
        return log("‚õî Ce n'est pas ton tour !");
    }
    if (discardPile.length === 0) {
        return log("‚ùå Aucune carte dans la d√©fausse.");
    }
    if (drawnCard !== null) {
        return log("‚ö†Ô∏è G√©rez d'abord la carte pioch√©e en cours.");
    }
    // R√©cup√©rer la derni√®re carte de la d√©fausse comme si on la piochait
    drawnCard = discardPile.pop();
    log(`üîÅ Carte r√©cup√©r√©e de la d√©fausse : ${drawnCard}`);
    // Ici, on ne consid√®re pas la carte reprise de la d√©fausse comme "carte sp√©ciale" utilisable (on l'utilise directement)
    showDrawnCard();
}

function attemptBotCardPlay(index, botCard) {
    // Tentative du joueur de d√©fausser une carte du bot si elle correspond √† la d√©fausse (r√®gle m√©moire "matching")
    const topDiscard = discardPile[discardPile.length - 1];
    if (!topDiscard) {
        return log("‚ùå Il n'y a pas de carte dans la d√©fausse.");
    }
    if (botCard === topDiscard) {
        // Bonne correspondance : retirer la carte du bot
        log(`üéØ Correspondance trouv√©e ! La carte ${botCard} du bot est d√©fauss√©e. Vous lui donnez l'une de vos cartes en √©change.`);
        discardPile.push(botCards[index]); // la carte du bot part √† la d√©fausse
        // Le bot re√ßoit une carte du joueur (la derni√®re carte du joueur est transf√©r√©e)
        if (playerCards.length > 0) {
            botCards[index] = playerCards.pop();
        } else {
            botCards[index] = CARD_POOL[Math.floor(Math.random() * CARD_POOL.length)];
        }
    } else {
        // Mauvaise tentative : p√©nalit√© pour le joueur (pioche une carte suppl√©mentaire)
        log("‚ùå Mauvaise tentative. Vous piochez une carte de p√©nalit√© dans votre jeu.");
        playerCards.push(CARD_POOL[Math.floor(Math.random() * CARD_POOL.length)]);
    }
    renderCards();
}

function useSpecialPower(card) {
    // Ex√©cution du pouvoir sp√©cial de la carte
    if (card === 8) {
        // Voir l'une de ses propres cartes
        if (playerCards.length === 0) return;
        let idx = prompt("Indice de votre carte √† regarder (0 √† " + (playerCards.length - 1) + ") :");
        idx = parseInt(idx);
        if (isNaN(idx) || idx < 0 || idx >= playerCards.length) {
            log("‚ùå Pouvoir annul√© (indice invalide).");
        } else {
            const seenCard = playerCards[idx];
            // R√©v√©ler temporairement visuellement la carte choisie
            revealedIndexes.push(idx);
            renderCards();
            setTimeout(() => {
                // Cacher √† nouveau apr√®s 3s
                revealedIndexes = revealedIndexes.filter(i => i !== idx);
                renderCards();
            }, 3000);
            log(`üëÄ Vous regardez secr√®tement votre carte position ${idx} : ${seenCard}.`);
        }
    } else if (card === 10) {
        // Voir une carte de l'adversaire
        if (botCards.length === 0) return;
        let idx = prompt("Indice de la carte de l'adversaire √† regarder (0 √† " + (botCards.length - 1) + ") :");
        idx = parseInt(idx);
        if (isNaN(idx) || idx < 0 || idx >= botCards.length) {
            log("‚ùå Pouvoir annul√© (indice invalide).");
        } else {
            const seenCard = botCards[idx];
            // R√©v√©ler temporairement la carte du bot choisie (au joueur seulement)
            revealedBotIndexes.push(idx);
            renderCards();
            setTimeout(() => {
                revealedBotIndexes = revealedBotIndexes.filter(i => i !== idx);
                renderCards();
            }, 3000);
            log(`üîé Vous regardez secr√®tement la carte ${idx} de l'adversaire : ${seenCard}.`);
        }
    } else if (card === "V") {
        // √âchanger une carte avec l'adversaire (sans les regarder)
        if (playerCards.length === 0 || botCards.length === 0) return;
        let idxPlayer = prompt("Indice de VOTRE carte √† √©changer (0 √† " + (playerCards.length - 1) + ") :");
        let idxBot = prompt("Indice de la carte ADVERSAIRE √† √©changer (0 √† " + (botCards.length - 1) + ") :");
        idxPlayer = parseInt(idxPlayer);
        idxBot = parseInt(idxBot);
        if (isNaN(idxPlayer) || isNaN(idxBot) || idxPlayer < 0 || idxPlayer >= playerCards.length || idxBot < 0 || idxBot >= botCards.length) {
            log("‚ùå Pouvoir annul√© (indice invalide).");
        } else {
            const temp = playerCards[idxPlayer];
            playerCards[idxPlayer] = botCards[idxBot];
            botCards[idxBot] = temp;
            log("üîÄ Vous √©changez une carte de votre jeu avec une de celles de l'adversaire.");
        }
    } else if (card === "D") {
        // Dame (Queen) - dans cette version, on peut la traiter comme un Valet (√©changer)
        if (playerCards.length === 0 || botCards.length === 0) return;
        const idxPlayer = Math.floor(Math.random() * playerCards.length);
        const idxBot = Math.floor(Math.random() * botCards.length);
        const temp = playerCards[idxPlayer];
        playerCards[idxPlayer] = botCards[idxBot];
        botCards[idxBot] = temp;
        log("üëë Pouvoir de la Dame : √©change al√©atoire effectu√© entre vos jeux.");
    }
    // Dans tous les cas, la carte sp√©ciale est d√©fauss√©e apr√®s utilisation
    discardPile.push(card);
    drawnCard = null;
    document.getElementById("drawn-card").style.display = "none";
    document.getElementById("discard-drawn")?.remove();
}

function endPlayerTurn() {
    // Terminer le tour du joueur et lancer le tour du bot si la partie continue
    if (currentPlayer === "Toi") {
        currentPlayer = "Bot";
        updateTurnInfo();
        setTimeout(botTurn, 500);  // l√©g√®re pause avant le tour du bot
    }
}

function botTurn() {
    // Logique simple du tour du bot (piocher et jouer une carte)
    if (playerCards.length === 0 || botCards.length === 0) return;
    // Bot pioche une carte (toujours du talon)
    let botDraw = CARD_POOL[Math.floor(Math.random() * CARD_POOL.length)];
    let usedPower = false;
    log(`ü§ñ Le bot pioche : ${botDraw}`);
    // Le bot d√©cide quoi faire de la carte pioch√©e
    if (botDraw === 8 || botDraw === 9 || botDraw === 10 || botDraw === "V" || botDraw === "D") {
        // Cartes sp√©ciales : strat√©gie du bot pour utilisation
        if (botDraw === 8) {
            // Bot regarde l'une de ses cartes (al√©atoirement)
            if (botCards.length > 0) {
                const idx = Math.floor(Math.random() * botCards.length);
                const cardSeen = botCards[idx];
                // Bot "m√©morise" sa carte (pas de repr√©sentation visible pour le joueur)
                log("ü§ñ Le bot regarde l'une de ses cartes en secret.");
            }
            usedPower = true;
        } else if (botDraw === 10) {
            // Bot regarde une carte du joueur (al√©atoirement)
            if (playerCards.length > 0) {
                const idx = Math.floor(Math.random() * playerCards.length);
                const cardSeen = playerCards[idx];
                log("ü§ñ Le bot regarde une de vos cartes en secret.");
            }
            usedPower = true;
        } else if (botDraw === "V" || botDraw === "D") {
            // Bot √©change une carte avec le joueur (au hasard)
            if (playerCards.length > 0 && botCards.length > 0) {
                const idxPlayer = Math.floor(Math.random() * playerCards.length);
                const idxBot = Math.floor(Math.random() * botCards.length);
                const temp = botCards[idxBot];
                botCards[idxBot] = playerCards[idxPlayer];
                playerCards[idxPlayer] = temp;
                log("ü§ñ Le bot utilise un pouvoir d'√©change de carte.");
            }
            usedPower = true;
        }
    }
    if (usedPower) {
        // Si un pouvoir a √©t√© utilis√©, la carte sp√©ciale est d√©fauss√©e et le tour du bot se termine
        discardPile.push(botDraw);
    } else {
        // Si pas de pouvoir utilis√©, le bot √©value la carte
        // Convertir les cartes en valeur de points pour d√©cision (Roi=0, As=1, Figures=10, autres = valeur)
        const value = (card) => {
            if (card === "R") return 0;
            if (card === "A") return 1;
            if (card === "V" || card === "D" || card === 10) return 10;
            return card; // pour 2-9 (num√©riques)
        };
        const newCardValue = value(botDraw);
        // Chercher la carte la plus haute du bot pour potentiellement l'√©changer
        let highestValue = -1;
        let highestIndex = -1;
        botCards.forEach((c, idx) => {
            const val = value(c);
            if (val > highestValue) {
                highestValue = val;
                highestIndex = idx;
            }
        });
        // D√©cision simple : si la carte pioch√©e est meilleure (valeur plus basse) que la pire carte actuelle du bot, on √©change
        if (newCardValue < highestValue) {
            // √âchanger la nouvelle carte avec la carte de plus haute valeur
            const oldCard = botCards[highestIndex];
            botCards[highestIndex] = botDraw;
            discardPile.push(oldCard);
            log(`ü§ñ Le bot √©change sa carte ${oldCard} contre ${botDraw}.`);
        } else {
            // Sinon, le bot d√©fausse la carte pioch√©e
            discardPile.push(botDraw);
            log(`ü§ñ Le bot d√©fausse la carte ${botDraw}.`);
        }
    }
    // Mettre √† jour l'affichage apr√®s le tour du bot
    renderCards();
    // V√©rifier si le bot d√©clare "Cactus" (non impl√©ment√© ici)
    // Fin du tour du bot, retour au joueur
    currentPlayer = "Toi";
    updateTurnInfo();
}

function declareCactus() {
    if (currentPlayer !== "Toi") {
        return log("‚õî Ce n'est pas √† vous de d√©clarer 'Cactus'.");
    }
    if (drawnCard !== null) {
        return log("‚ö†Ô∏è Vous ne pouvez pas d√©clarer 'Cactus' en pleine action (carte pioch√©e non jou√©e).");
    }
    log("üåµ Vous d√©clarez 'Cactus' ! Fin de manche imminente.");
    // Le bot joue un dernier tour
    currentPlayer = "Bot";
    updateTurnInfo();
    log("ü§ñ Le bot joue son dernier tour avant r√©v√©lation...");
    botTurn();
    // R√©v√©ler toutes les cartes et calculer les scores
    let playerScore = 0, botScore = 0;
    const val = (card) => {
        if (card === "R") return 0;
        if (card === "A") return 1;
        if (card === "V" || card === "D" || card === 10) return 10;
        return card;
    };
    playerCards.forEach(c => playerScore += val(c));
    botCards.forEach(c => botScore += val(c));
    log(`üìä Score final - ${document.getElementById("player-name").innerText} : ${playerScore} points, Bot : ${botScore} points.`);
    if (playerScore < botScore) {
        log("üèÜ Vous remportez cette manche !");
        playerWins++;
    } else if (botScore < playerScore) {
        log("ü§ñ Le bot remporte cette manche.");
        botWins++;
    } else {
        log("‚öñÔ∏è √âgalit√© parfaite sur cette manche !");
    }
    // Mettre √† jour le tableau des scores cumul√©s
    document.getElementById("scores-list").innerText = `Moi : ${playerWins} | Bot : ${botWins}`;
    // V√©rifier condition de fin de partie
    if (playerWins >= targetScore || botWins >= targetScore) {
        if (playerWins > botWins) {
            log("üéâ Partie termin√©e : Vous gagnez la partie Cactus !");
        } else if (botWins > playerWins) {
            log("üòî Partie termin√©e : Le bot gagne la partie Cactus.");
        } else {
            log("üé≤ Partie termin√©e sur une √©galit√© parfaite !");
        }
        alert("Partie termin√©e. Rafra√Æchissez la page pour rejouer.");
    } else {
        // Proposer de lancer la prochaine manche
        if (confirm("Manche termin√©e. Voulez-vous lancer la manche suivante ?")) {
            // Relancer une nouvelle manche avec la m√™me configuration
            startNewGame();
        } else {
            log("üîö Partie interrompue. Rafra√Æchissez la page pour une nouvelle partie.");
        }
    }
}

function updateTurnInfo() {
    const info = document.getElementById("turn-info");
    if (info) {
        info.innerText = (currentPlayer === "Toi" ? "Tour du joueur" : "Tour du bot");
    }
}

// Pas de logique Firebase dans la version offline
